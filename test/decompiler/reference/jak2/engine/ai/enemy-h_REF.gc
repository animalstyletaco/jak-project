;;-*-Lisp-*-
(in-package goal)

;; name: enemy-h.gc
;; name in dgo: enemy-h
;; dgos: GAME, COMMON

;;-*-Lisp-*-
(in-package goal)

;; definition of type enemy-focus
(deftype enemy-focus (temp-focus)
  ((aware uint64  :offset-assert  16)
   (flags uint64  :offset-assert  24)
   )
  :method-count-assert 14
  :size-assert         #x20
  :flag-assert         #xe00000020
  (:methods
    (enemy-focus-method-12 (_type_ uint32 enemy) symbol 12)
    (enemy-focus-method-13 (_type_ uint32 uint32) symbol 13)
    )
  )

;; definition for method 3 of type enemy-focus
(defmethod inspect enemy-focus ((obj enemy-focus))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'enemy-focus)
  (format #t "~1Thandle: ~D~%" (-> obj handle))
  (format #t "~1Tcollide-with: ~D~%" (-> obj collide-with))
  (format #t "~1Taware: ~D~%" (-> obj aware))
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (label cfg-4)
  obj
  )

;; definition of type enemy-info
(deftype enemy-info (basic)
  ((fact-defaults                       basic           :offset-assert   4)
   (use-die-falling                     basic           :offset-assert   8)
   (use-victory                         basic           :offset-assert  12)
   (use-jump-blocked                    basic           :offset-assert  16)
   (debug-draw-neck                     basic           :offset-assert  20)
   (jump-debug-draw                     basic           :offset-assert  24)
   (move-to-ground                      basic           :offset-assert  28)
   (hover-if-no-ground                  basic           :offset-assert  32)
   (idle-anim-script                    uint32          :offset-assert  36)
   (idle-anim                           int32           :offset-assert  40)
   (notice-anim                         int32           :offset-assert  44)
   (hostile-anim                        int32           :offset-assert  48)
   (hit-anim                            int32           :offset-assert  52)
   (knocked-anim                        int32           :offset-assert  56)
   (knocked-land-anim                   int32           :offset-assert  60)
   (die-anim                            int32           :offset-assert  64)
   (die-falling-anim                    int32           :offset-assert  68)
   (victory-anim                        int32           :offset-assert  72)
   (jump-wind-up-anim                   int32           :offset-assert  76)
   (jump-in-air-anim                    int32           :offset-assert  80)
   (jump-land-anim                      int32           :offset-assert  84)
   (neck-joint                          int32           :offset-assert  88)
   (look-at-joint                       int32           :offset-assert  92)
   (bullseye-joint                      int32           :offset-assert  96)
   (sound-hit                           uint128         :offset-assert 112)
   (sound-die                           uint128         :offset-assert 128)
   (notice-distance                     meters          :offset-assert 144)
   (notice-distance-delta               meters          :offset-assert 148)
   (proximity-notice-distance           meters          :offset-assert 152)
   (default-hit-points                  int32           :offset-assert 156)
   (gnd-collide-with                    uint32          :offset-assert 160)
   (overlaps-others-collide-with-filter uint32          :offset-assert 164)
   (penetrate-flinch                    uint64          :offset-assert 168)
   (penetrate-knocked                   uint64          :offset-assert 176)
   (movement-gravity                    meters          :offset-assert 184)
   (friction                            float           :offset-assert 188)
   (slip-factor                         float           :offset-assert 192)
   (attack-shove-back                   meters          :offset-assert 196)
   (attack-shove-up                     meters          :offset-assert 200)
   (attack-mode                         basic           :offset-assert 204)
   (attack-damage                       int32           :offset-assert 208)
   (recover-gnd-collide-with            uint32          :offset-assert 212)
   (jump-height-min                     meters          :offset-assert 216)
   (jump-height-factor                  float           :offset-assert 220)
   (knocked-seek-ry-clamp               float           :offset-assert 224)
   (knocked-soft-vxz-lo                 float           :offset-assert 228)
   (knocked-soft-vxz-hi                 float           :offset-assert 232)
   (knocked-soft-vy-lo                  float           :offset-assert 236)
   (knocked-soft-vy-hi                  float           :offset-assert 240)
   (knocked-medium-vxz-lo               float           :offset-assert 244)
   (knocked-medium-vxz-hi               float           :offset-assert 248)
   (knocked-medium-vy-lo                float           :offset-assert 252)
   (knocked-medium-vy-hi                float           :offset-assert 256)
   (knocked-hard-vxz-lo                 float           :offset-assert 260)
   (knocked-hard-vxz-hi                 float           :offset-assert 264)
   (knocked-hard-vy-lo                  float           :offset-assert 268)
   (knocked-hard-vy-hi                  float           :offset-assert 272)
   (knocked-huge-vxz-lo                 float           :offset-assert 276)
   (knocked-huge-vxz-hi                 float           :offset-assert 280)
   (knocked-huge-vy-lo                  float           :offset-assert 284)
   (knocked-huge-vy-hi                  float           :offset-assert 288)
   (knocked-yellow-vxz-lo               float           :offset-assert 292)
   (knocked-yellow-vxz-hi               float           :offset-assert 296)
   (knocked-yellow-vy-lo                float           :offset-assert 300)
   (knocked-yellow-vy-hi                float           :offset-assert 304)
   (knocked-red-vxz-lo                  float           :offset-assert 308)
   (knocked-red-vxz-hi                  float           :offset-assert 312)
   (knocked-red-vy-lo                   float           :offset-assert 316)
   (knocked-red-vy-hi                   float           :offset-assert 320)
   (knocked-blue-vxz-lo                 float           :offset-assert 324)
   (knocked-blue-vxz-hi                 float           :offset-assert 328)
   (knocked-blue-vy-lo                  float           :offset-assert 332)
   (knocked-blue-vy-hi                  float           :offset-assert 336)
   (shadow-size                         meters          :offset-assert 340)
   (shadow-max-y                        meters          :offset-assert 344)
   (shadow-min-y                        meters          :offset-assert 348)
   (shadow-locus-dist                   meters          :offset-assert 352)
   (gem-joint                           int32           :offset-assert 356)
   (gem-seg                             uint32          :offset-assert 360)
   (gem-no-seg                          uint32          :offset-assert 364)
   (gem-offset                          sphere  :inline :offset-assert 368)
   )
  :method-count-assert 10
  :size-assert         #x180
  :flag-assert         #xa00000180
  (:methods
    (enemy-info-method-9 (_type_) uint32 9)
    )
  )

;; definition for method 3 of type enemy-info
;; INFO: Used lq/sq
(defmethod inspect enemy-info ((obj enemy-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj (-> obj type))
  (format #t "~1Tfact-defaults: ~A~%" (-> obj fact-defaults))
  (format #t "~1Tuse-die-falling: ~A~%" (-> obj use-die-falling))
  (format #t "~1Tuse-victory: ~A~%" (-> obj use-victory))
  (format #t "~1Tuse-jump-blocked: ~A~%" (-> obj use-jump-blocked))
  (format #t "~1Tdebug-draw-neck: ~A~%" (-> obj debug-draw-neck))
  (format #t "~1Tjump-debug-draw: ~A~%" (-> obj jump-debug-draw))
  (format #t "~1Tmove-to-ground: ~A~%" (-> obj move-to-ground))
  (format #t "~1Thover-if-no-ground: ~A~%" (-> obj hover-if-no-ground))
  (format #t "~1Tidle-anim-script: #x~X~%" (-> obj idle-anim-script))
  (format #t "~1Tidle-anim: ~D~%" (-> obj idle-anim))
  (format #t "~1Tnotice-anim: ~D~%" (-> obj notice-anim))
  (format #t "~1Thostile-anim: ~D~%" (-> obj hostile-anim))
  (format #t "~1Thit-anim: ~D~%" (-> obj hit-anim))
  (format #t "~1Tknocked-anim: ~D~%" (-> obj knocked-anim))
  (format #t "~1Tknocked-land-anim: ~D~%" (-> obj knocked-land-anim))
  (format #t "~1Tdie-anim: ~D~%" (-> obj die-anim))
  (format #t "~1Tdie-falling-anim: ~D~%" (-> obj die-falling-anim))
  (format #t "~1Tvictory-anim: ~D~%" (-> obj victory-anim))
  (format #t "~1Tjump-wind-up-anim: ~D~%" (-> obj jump-wind-up-anim))
  (format #t "~1Tjump-in-air-anim: ~D~%" (-> obj jump-in-air-anim))
  (format #t "~1Tjump-land-anim: ~D~%" (-> obj jump-land-anim))
  (format #t "~1Tneck-joint: ~D~%" (-> obj neck-joint))
  (format #t "~1Tlook-at-joint: ~D~%" (-> obj look-at-joint))
  (format #t "~1Tbullseye-joint: ~D~%" (-> obj bullseye-joint))
  (format #t "~1Tsound-hit: ~D~%" (-> obj sound-hit))
  (format #t "~1Tsound-die: ~D~%" (-> obj sound-die))
  (format #t "~1Tnotice-distance: (meters ~m)~%" (-> obj notice-distance))
  (format #t "~1Tnotice-distance-delta: (meters ~m)~%" (-> obj notice-distance-delta))
  (format #t "~1Tproximity-notice-distance: (meters ~m)~%" (-> obj proximity-notice-distance))
  (format #t "~1Tdefault-hit-points: ~D~%" (-> obj default-hit-points))
  (format #t "~1Tgnd-collide-with: ~D~%" (-> obj gnd-collide-with))
  (format #t "~1Toverlaps-others-collide-with-filter: ~D~%" (-> obj overlaps-others-collide-with-filter))
  (format #t "~1Tpenetrate-flinch: ~D~%" (-> obj penetrate-flinch))
  (format #t "~1Tpenetrate-knocked: ~D~%" (-> obj penetrate-knocked))
  (format #t "~1Tmovement-gravity: (meters ~m)~%" (-> obj movement-gravity))
  (format #t "~1Tfriction: ~f~%" (-> obj friction))
  (format #t "~1Tslip-factor: ~f~%" (-> obj slip-factor))
  (format #t "~1Tattack-shove-back: (meters ~m)~%" (-> obj attack-shove-back))
  (format #t "~1Tattack-shove-up: (meters ~m)~%" (-> obj attack-shove-up))
  (format #t "~1Tattack-mode: ~A~%" (-> obj attack-mode))
  (format #t "~1Tattack-damage: ~D~%" (-> obj attack-damage))
  (format #t "~1Trecover-gnd-collide-with: ~D~%" (-> obj recover-gnd-collide-with))
  (format #t "~1Tjump-height-min: (meters ~m)~%" (-> obj jump-height-min))
  (format #t "~1Tjump-height-factor: ~f~%" (-> obj jump-height-factor))
  (format #t "~1Tknocked-seek-ry-clamp: ~f~%" (-> obj knocked-seek-ry-clamp))
  (format #t "~1Tknocked-soft-vxz-lo: ~f~%" (-> obj knocked-soft-vxz-lo))
  (format #t "~1Tknocked-soft-vxz-hi: ~f~%" (-> obj knocked-soft-vxz-hi))
  (format #t "~1Tknocked-soft-vy-lo: ~f~%" (-> obj knocked-soft-vy-lo))
  (format #t "~1Tknocked-soft-vy-hi: ~f~%" (-> obj knocked-soft-vy-hi))
  (format #t "~1Tknocked-medium-vxz-lo: ~f~%" (-> obj knocked-medium-vxz-lo))
  (format #t "~1Tknocked-medium-vxz-hi: ~f~%" (-> obj knocked-medium-vxz-hi))
  (format #t "~1Tknocked-medium-vy-lo: ~f~%" (-> obj knocked-medium-vy-lo))
  (format #t "~1Tknocked-medium-vy-hi: ~f~%" (-> obj knocked-medium-vy-hi))
  (format #t "~1Tknocked-hard-vxz-lo: ~f~%" (-> obj knocked-hard-vxz-lo))
  (format #t "~1Tknocked-hard-vxz-hi: ~f~%" (-> obj knocked-hard-vxz-hi))
  (format #t "~1Tknocked-hard-vy-lo: ~f~%" (-> obj knocked-hard-vy-lo))
  (format #t "~1Tknocked-hard-vy-hi: ~f~%" (-> obj knocked-hard-vy-hi))
  (format #t "~1Tknocked-huge-vxz-lo: ~f~%" (-> obj knocked-huge-vxz-lo))
  (format #t "~1Tknocked-huge-vxz-hi: ~f~%" (-> obj knocked-huge-vxz-hi))
  (format #t "~1Tknocked-huge-vy-lo: ~f~%" (-> obj knocked-huge-vy-lo))
  (format #t "~1Tknocked-huge-vy-hi: ~f~%" (-> obj knocked-huge-vy-hi))
  (format #t "~1Tknocked-yellow-vxz-lo: ~f~%" (-> obj knocked-yellow-vxz-lo))
  (format #t "~1Tknocked-yellow-vxz-hi: ~f~%" (-> obj knocked-yellow-vxz-hi))
  (format #t "~1Tknocked-yellow-vy-lo: ~f~%" (-> obj knocked-yellow-vy-lo))
  (format #t "~1Tknocked-yellow-vy-hi: ~f~%" (-> obj knocked-yellow-vy-hi))
  (format #t "~1Tknocked-red-vxz-lo: ~f~%" (-> obj knocked-red-vxz-lo))
  (format #t "~1Tknocked-red-vxz-hi: ~f~%" (-> obj knocked-red-vxz-hi))
  (format #t "~1Tknocked-red-vy-lo: ~f~%" (-> obj knocked-red-vy-lo))
  (format #t "~1Tknocked-red-vy-hi: ~f~%" (-> obj knocked-red-vy-hi))
  (format #t "~1Tknocked-blue-vxz-lo: ~f~%" (-> obj knocked-blue-vxz-lo))
  (format #t "~1Tknocked-blue-vxz-hi: ~f~%" (-> obj knocked-blue-vxz-hi))
  (format #t "~1Tknocked-blue-vy-lo: ~f~%" (-> obj knocked-blue-vy-lo))
  (format #t "~1Tknocked-blue-vy-hi: ~f~%" (-> obj knocked-blue-vy-hi))
  (format #t "~1Tshadow-size: (meters ~m)~%" (-> obj shadow-size))
  (format #t "~1Tshadow-max-y: (meters ~m)~%" (-> obj shadow-max-y))
  (format #t "~1Tshadow-min-y: (meters ~m)~%" (-> obj shadow-min-y))
  (format #t "~1Tshadow-locus-dist: (meters ~m)~%" (-> obj shadow-locus-dist))
  (format #t "~1Tgem-joint: ~D~%" (-> obj gem-joint))
  (format #t "~1Tgem-seg: ~D~%" (-> obj gem-seg))
  (format #t "~1Tgem-no-seg: ~D~%" (-> obj gem-no-seg))
  (format #t "~1Tgem-offset: #<sphere @ #x~X>~%" (-> obj gem-offset))
  (label cfg-4)
  obj
  )

;; definition of type enemy-knocked-info
(deftype enemy-knocked-info (structure)
  ((anim-speed         float       :offset-assert   0)
   (on-surface-count   int32       :offset-assert   4)
   (move-count         int32       :offset-assert   8)
   (land-can-land-time time-frame  :offset-assert  16)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )

;; definition for method 3 of type enemy-knocked-info
(defmethod inspect enemy-knocked-info ((obj enemy-knocked-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'enemy-knocked-info)
  (format #t "~1Tanim-speed: ~f~%" (-> obj anim-speed))
  (format #t "~1Ton-surface-count: ~D~%" (-> obj on-surface-count))
  (format #t "~1Tmove-count: ~D~%" (-> obj move-count))
  (format #t "~1Tland-can-land-time: ~D~%" (-> obj land-can-land-time))
  (label cfg-4)
  obj
  )

;; definition of type enemy-jump-info
(deftype enemy-jump-info (structure)
  ((flags      uint8              :offset-assert   0)
   (anim-speed float              :offset-assert   4)
   (hang-time  time-frame         :offset-assert   8)
   (start-pos  vector     :inline :offset-assert  16)
   (dest-pos   vector     :inline :offset-assert  32)
   (traj       trajectory :inline :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x58
  :flag-assert         #x900000058
  )

;; definition for method 3 of type enemy-jump-info
(defmethod inspect enemy-jump-info ((obj enemy-jump-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'enemy-jump-info)
  (format #t "~1Tflags: ~D~%" (-> obj flags))
  (format #t "~1Tanim-speed: ~f~%" (-> obj anim-speed))
  (format #t "~1Thang-time: ~D~%" (-> obj hang-time))
  (format #t "~1Tstart-pos: #<vector @ #x~X>~%" (-> obj start-pos))
  (format #t "~1Tdest-pos: #<vector @ #x~X>~%" (-> obj dest-pos))
  (format #t "~1Ttraj: #<trajectory @ #x~X>~%" (-> obj traj))
  (label cfg-4)
  obj
  )

;; definition of type enemy-init-by-other-params
(deftype enemy-init-by-other-params (structure)
  ((trans                      vector     :inline :offset-assert   0)
   (quat                       quaternion :inline :offset-assert  16)
   (entity                     basic              :offset-assert  32)
   (directed?                  basic              :offset-assert  36)
   (no-initial-move-to-ground? basic              :offset-assert  40)
   )
  :method-count-assert 9
  :size-assert         #x2c
  :flag-assert         #x90000002c
  )

;; definition for method 3 of type enemy-init-by-other-params
(defmethod inspect enemy-init-by-other-params ((obj enemy-init-by-other-params))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'enemy-init-by-other-params)
  (format #t "~1Ttrans: #<vector @ #x~X>~%" (-> obj trans))
  (format #t "~1Tquat: #<quaternion @ #x~X>~%" (-> obj quat))
  (format #t "~1Tentity: ~A~%" (-> obj entity))
  (format #t "~1Tdirected?: ~A~%" (-> obj directed?))
  (format #t "~1Tno-initial-move-to-ground?: ~A~%" (-> obj no-initial-move-to-ground?))
  (label cfg-4)
  obj
  )

;; definition of type enemy-attack-info
(deftype enemy-attack-info (structure)
  ((attack-id         uint32             :offset-assert   0)
   (knocked-type      uint8              :offset-assert   4)
   (blue-juggle-count uint8              :offset-assert   5)
   (attacker-handle   uint64             :offset-assert   8)
   (attack-time       time-frame         :offset-assert  16)
   (penetrate-using   uint64             :offset-assert  24)
   (attacker-pos      vector     :inline :offset-assert  32)
   (attack-direction  vector     :inline :offset-assert  48)
   )
  :method-count-assert 9
  :size-assert         #x40
  :flag-assert         #x900000040
  )

;; definition for method 3 of type enemy-attack-info
(defmethod inspect enemy-attack-info ((obj enemy-attack-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'enemy-attack-info)
  (format #t "~1Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~1Tknocked-type: ~D~%" (-> obj knocked-type))
  (format #t "~1Tblue-juggle-count: ~D~%" (-> obj blue-juggle-count))
  (format #t "~1Tattacker-handle: ~D~%" (-> obj attacker-handle))
  (format #t "~1Tattack-time: ~D~%" (-> obj attack-time))
  (format #t "~1Tpenetrate-using: ~D~%" (-> obj penetrate-using))
  (format #t "~1Tattacker-pos: ~`vector`P~%" (-> obj attacker-pos))
  (format #t "~1Tattack-direction: ~`vector`P~%" (-> obj attack-direction))
  (label cfg-4)
  obj
  )

;; definition of type enemy-best-focus
(deftype enemy-best-focus (structure)
  ((proc   basic   :offset-assert   0)
   (rating float   :offset-assert   4)
   (aware  uint64  :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )

;; definition for method 3 of type enemy-best-focus
(defmethod inspect enemy-best-focus ((obj enemy-best-focus))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'enemy-best-focus)
  (format #t "~1Tproc: ~A~%" (-> obj proc))
  (format #t "~1Trating: ~f~%" (-> obj rating))
  (format #t "~1Taware: ~D~%" (-> obj aware))
  (label cfg-4)
  obj
  )

;; definition of type enemy
(deftype enemy (process-focusable)
  ((enemy-flags               enemy-flag                :offset-assert 208)
   (enemy-info                symbol                    :offset-assert 216)
   (hit-points                int32                     :offset-assert 220)
   (gnd-collide               uint32                    :offset-assert 224)
   (attack-id                 uint32                    :offset-assert 228)
   (persistent-attack-id      uint32                    :offset-assert 232)
   (water-max-height          float                     :offset-assert 236)
   (water-surface-height      float                     :offset-assert 240)
   (desired-angle             float                     :offset-assert 244)
   (jump-why                  uint64                    :offset-assert 248)
   (penetrated-by-all         uint64                    :offset-assert 256)
   (penetrated-flinch         uint64                    :offset-assert 264)
   (penetrated-knocked        uint64                    :offset-assert 272)
   (reaction-time             uint64                    :offset-assert 280)
   (notice-time               uint64                    :offset-assert 288)
   (state-timeout             uint64                    :offset-assert 296)
   (auto-reset-penetrate-time uint64                    :offset-assert 304)
   (hit-focus-time            uint64                    :offset-assert 312)
   (last-draw-time            uint64                    :offset-assert 320)
   (starting-time             uint64                    :offset-assert 328)
   (fated-time                uint64                    :offset-assert 336)
   (focus-pos                 vector            :inline :offset-assert 352)
   (event-param-point         vector            :inline :offset-assert 368)
   (jump-dest                 vector            :inline :offset        368)
   (focus                     enemy-focus       :inline :offset-assert 384)
   (incoming                  enemy-attack-info :inline :offset-assert 416)
   (actor-group               actor-group               :offset-assert 480)
   (actor-group-count         int32                     :offset-assert 484)
   (neck                      symbol                    :offset-assert 488)
   (on-notice                 symbol                    :offset-assert 492)
   (on-active                 symbol                    :offset-assert 496)
   (on-hostile                symbol                    :offset-assert 500)
   (on-death                  symbol                    :offset-assert 504)
   (idle-anim-player          idle-control      :inline :offset-assert 512)
   (rand-gen                  symbol                    :offset-assert 528)
   )
  :heap-base #x1a0
  :method-count-assert 137
  :size-assert         #x214
  :flag-assert         #x8901a00214
  (:methods
    (enemy-method-27 () none 27)
    (enemy-method-28 () none 28)
    (enemy-method-29 () none 29)
    (enemy-method-30 () none 30)
    (enemy-method-31 () none 31)
    (enemy-method-32 () none 32)
    (enemy-method-33 () none 33)
    (enemy-method-34 () none 34)
    (enemy-method-35 () none 35)
    (enemy-method-36 () none 36)
    (enemy-method-37 () none 37)
    (enemy-method-38 () none 38)
    (enemy-method-39 () none 39)
    (enemy-method-40 () none 40)
    (enemy-method-41 () none 41)
    (enemy-method-42 () none 42)
    (enemy-method-43 () none 43)
    (enemy-method-44 () none 44)
    (enemy-method-45 () none 45)
    (enemy-method-46 () none 46)
    (enemy-method-47 () none 47)
    (enemy-method-48 () none 48)
    (enemy-method-49 () none 49)
    (enemy-method-50 () none 50)
    (enemy-method-51 () none 51)
    (enemy-method-52 () none 52)
    (enemy-method-53 () none 53)
    (enemy-method-54 () none 54)
    (enemy-method-55 () none 55)
    (enemy-method-56 () none 56)
    (enemy-method-57 () none 57)
    (enemy-method-58 () none 58)
    (enemy-method-59 () none 59)
    (enemy-method-60 () none 60)
    (enemy-method-61 () none 61)
    (enemy-method-62 () none 62)
    (enemy-method-63 () none 63)
    (enemy-method-64 () none 64)
    (enemy-method-65 () none 65)
    (enemy-method-66 () none 66)
    (enemy-method-67 () none 67)
    (enemy-method-68 () none 68)
    (enemy-method-69 () none 69)
    (enemy-method-70 () none 70)
    (enemy-method-71 () none 71)
    (enemy-method-72 () none 72)
    (enemy-method-73 () none 73)
    (enemy-method-74 () none 74)
    (enemy-method-75 () none 75)
    (enemy-method-76 () none 76)
    (enemy-method-77 () none 77)
    (enemy-method-78 () none 78)
    (enemy-method-79 () none 79)
    (enemy-method-80 () none 80)
    (enemy-method-81 () none 81)
    (enemy-method-82 () none 82)
    (enemy-method-83 () none 83)
    (enemy-method-84 () none 84)
    (enemy-method-85 () none 85)
    (enemy-method-86 () none 86)
    (enemy-method-87 () none 87)
    (enemy-method-88 () none 88)
    (enemy-method-89 () none 89)
    (enemy-method-90 () none 90)
    (enemy-method-91 () none 91)
    (enemy-method-92 () none 92)
    (enemy-method-93 () none 93)
    (enemy-method-94 () none 94)
    (enemy-method-95 () none 95)
    (enemy-method-96 () none 96)
    (enemy-method-97 () none 97)
    (enemy-method-98 () none 98)
    (enemy-method-99 () none 99)
    (enemy-method-100 () none 100)
    (enemy-method-101 () none 101)
    (enemy-method-102 () none 102)
    (enemy-method-103 () none 103)
    (enemy-method-104 () none 104)
    (enemy-method-105 () none 105)
    (enemy-method-106 () none 106)
    (enemy-method-107 () none 107)
    (enemy-method-108 () none 108)
    (enemy-method-109 () none 109)
    (enemy-method-110 () none 110)
    (enemy-method-111 () none 111)
    (enemy-method-112 () none 112)
    (enemy-method-113 () none 113)
    (enemy-method-114 () none 114)
    (enemy-method-115 () none 115)
    (enemy-method-116 () none 116)
    (enemy-method-117 () none 117)
    (enemy-method-118 () none 118)
    (enemy-method-119 () none 119)
    (enemy-method-120 () none 120)
    (enemy-method-121 () none 121)
    (enemy-method-122 () none 122)
    (enemy-method-123 () none 123)
    (enemy-method-124 () none 124)
    (enemy-method-125 () none 125)
    (enemy-method-126 () none 126)
    (enemy-method-127 () none 127)
    (enemy-method-128 () none 128)
    (enemy-method-129 () none 129)
    (enemy-method-130 () none 130)
    (enemy-method-131 () none 131)
    (enemy-method-132 () none 132)
    (enemy-method-133 () none 133)
    (enemy-method-134 () none 134)
    (enemy-method-135 () none 135)
    (enemy-method-136 () none 136)
    )
  )

;; definition for method 3 of type enemy
(defmethod inspect enemy ((obj enemy))
  (when (not obj)
    (set! obj obj)
    (goto cfg-79)
    )
  (let ((t9-0 (method-of-type process-focusable inspect)))
    (t9-0 obj)
    )
  (format #t "~2Tenemy-flags: #x~X : (enemy-flag " (-> obj enemy-flags))
  (let ((s5-0 (-> obj enemy-flags)))
    (if (= (logand (enemy-flag actor-pause-backup) s5-0) (enemy-flag actor-pause-backup))
        (format #t "lock-focus ")
        )
    (if (= (logand (enemy-flag recover) s5-0) (shl 8 32))
        (format #t "death-start ")
        )
    (if (= (logand s5-0 (enemy-flag jump-check-blocked)) (enemy-flag jump-check-blocked))
        (format #t "enable-on-active ")
        )
    (if (= (logand (enemy-flag directed-ready) s5-0) (enemy-flag directed-ready))
        (format #t "checking-water ")
        )
    (if (= (logand (enemy-flag trackable-backup) s5-0) (enemy-flag trackable-backup))
        (format #t "check-water ")
        )
    (if (= (logand (enemy-flag cam-attack-mode) s5-0) (enemy-flag cam-attack-mode))
        (format #t "spawn-gem ")
        )
    (if (= (logand (enemy-flag dangerous-backup) s5-0) (enemy-flag dangerous-backup))
        (format #t "chase-startup ")
        )
    (if (= (logand s5-0 (enemy-flag look-at-move-dest)) (enemy-flag look-at-move-dest))
        (format #t "attackable-backup ")
        )
    (if (= (logand s5-0 (enemy-flag lock-focus)) (enemy-flag lock-focus))
        (format #t "look-at-focus ")
        )
    (if (= (logand s5-0 (enemy-flag enable-on-notice)) (enemy-flag enable-on-notice))
        (format #t "use-notice-distance ")
        )
    (if (= (logand s5-0 (enemy-flag auto-reset-penetrate)) (enemy-flag auto-reset-penetrate))
        (format #t "enable-on-notice ")
        )
    (if (= (logand s5-0 (enemy-flag death-start)) (enemy-flag death-start))
        (format #t "look-at-move-dest ")
        )
    (if (= (logand s5-0 (enemy-flag spawn-gem)) (enemy-flag spawn-gem))
        (format #t "notice ")
        )
    (if (= (logand s5-0 (enemy-flag attackable-backup)) (enemy-flag attackable-backup))
        (format #t "auto-reset-penetrate ")
        )
    (if (= (logand (enemy-flag vulnerable) s5-0) (shl 4 32))
        (format #t "jump-check-blocked ")
        )
    (if (= (logand (enemy-flag dislike-combo) s5-0) (shl #x8000 16))
        (format #t "drawn-mirrored ")
        )
    (if (= (logand (enemy-flag trackable) s5-0) (enemy-flag trackable))
        (format #t "multi-focus ")
        )
    (if (= (logand s5-0 (enemy-flag chase-startup)) (enemy-flag chase-startup))
        (format #t "alert ")
        )
    (if (= (logand s5-0 (enemy-flag look-at-focus)) (enemy-flag look-at-focus))
        (format #t "victory ")
        )
    (if (= (logand s5-0 (enemy-flag check-water)) (enemy-flag check-water))
        (format #t "dangerous-backup ")
        )
    (if (= (logand s5-0 (enemy-flag notice)) (enemy-flag notice))
        (format #t "actor-pause-backup ")
        )
    (if (= (logand (enemy-flag check-water-backup) s5-0) (enemy-flag check-water-backup))
        (format #t "trackable ")
        )
    (if (= (logand (enemy-flag recover-applied-velocity) s5-0) (shl 1 32))
        (format #t "called-dying ")
        )
    (if (= (logand (enemy-flag enable-on-hostile) s5-0) (enemy-flag enable-on-hostile))
        (format #t "check-water-backup ")
        )
    (if (= (logand (enemy-flag vulnerable-backup) s5-0) (shl 2 32))
        (format #t "no-initial-move-to-ground ")
        )
    (if (= (logand s5-0 (enemy-flag use-notice-distance)) (enemy-flag use-notice-distance))
        (format #t "cam-attack-mode ")
        )
    (if (= (logand (enemy-flag no-initial-move-to-ground) s5-0) (enemy-flag no-initial-move-to-ground))
        (format #t "trackable-backup ")
        )
    (if (= (logand s5-0 (enemy-flag drawn-mirrored)) (enemy-flag drawn-mirrored))
        (format #t "enable-on-hostile ")
        )
    (if (= (logand (enemy-flag victory) s5-0) (enemy-flag victory))
        (format #t "directed-ready ")
        )
    (if (= (logand (enemy-flag called-dying) s5-0) (enemy-flag called-dying))
        (format #t "use-trigger ")
        )
    (if (= (logand (enemy-flag alert) s5-0) (enemy-flag alert))
        (format #t "directed ")
        )
    (if (= (logand (enemy-flag multi-focus) s5-0) (enemy-flag multi-focus))
        (format #t "dislike-combo ")
        )
    (if (= (logand (enemy-flag directed) s5-0) (enemy-flag directed))
        (format #t "recover-applied-velocity ")
        )
    (if (= (logand s5-0 (enemy-flag checking-water)) (enemy-flag checking-water))
        (format #t "vulnerable-backup ")
        )
    (if (= (logand s5-0 (enemy-flag enable-on-active)) (enemy-flag enable-on-active))
        (format #t "vulnerable ")
        )
    (if (= (logand (enemy-flag use-trigger) s5-0) (enemy-flag use-trigger))
        (format #t "recover ")
        )
    )
  (format #t ")~%")
  (format #t "~2Tenemy-info: ~A~%" (-> obj enemy-info))
  (format #t "~2Thit-points: ~D~%" (-> obj hit-points))
  (format #t "~2Tgnd-collide-with: ~D~%" (-> obj gnd-collide))
  (format #t "~2Tattack-id: ~D~%" (-> obj attack-id))
  (format #t "~2Tpersistent-attack-id: ~D~%" (-> obj persistent-attack-id))
  (format #t "~2Twater-max-height: ~f~%" (-> obj water-max-height))
  (format #t "~2Twater-surface-height: ~f~%" (-> obj water-surface-height))
  (format #t "~2Tdesired-angle: ~f~%" (-> obj desired-angle))
  (format #t "~2Tjump-why: ~D~%" (-> obj jump-why))
  (format #t "~2Tpenetrated-by-all: ~D~%" (-> obj penetrated-by-all))
  (format #t "~2Tpenetrate-flinch: ~D~%" (-> obj penetrated-flinch))
  (format #t "~2Tpenetrate-knocked: ~D~%" (-> obj penetrated-knocked))
  (format #t "~2Treaction-time: ~D~%" (-> obj reaction-time))
  (format #t "~2Tnotice-time: ~D~%" (-> obj notice-time))
  (format #t "~2Tstate-timeout: ~D~%" (-> obj state-timeout))
  (format #t "~2Tauto-reset-penetrate-time: ~D~%" (-> obj auto-reset-penetrate-time))
  (format #t "~2Thit-focus-time: ~D~%" (-> obj hit-focus-time))
  (format #t "~2Tlast-draw-time: ~D~%" (-> obj last-draw-time))
  (format #t "~2Tstarting-time: ~D~%" (-> obj starting-time))
  (format #t "~2Tfated-time: ~D~%" (-> obj fated-time))
  (format #t "~2Tfocus-pos: ~`vector`P~%" (-> obj focus-pos))
  (format #t "~2Tevent-param-point: ~`vector`P~%" (-> obj event-param-point))
  (format #t "~2Tjump-dest: ~`vector`P~%" (-> obj event-param-point))
  (format #t "~2Tfocus: #<enemy-focus @ #x~X>~%" (-> obj focus))
  (format #t "~2Tincoming: #<enemy-attack-info @ #x~X>~%" (-> obj incoming))
  (format #t "~2Tactor-group: #x~X~%" (-> obj actor-group))
  (dotimes (s5-1 (-> obj actor-group-count))
    (format
      #t
      "~T  [~D]~2Tactor-group: ~`actor-group`P~%"
      s5-1
      (-> (the-as (pointer uint32) (+ (the-as uint (-> obj actor-group)) (* s5-1 4))))
      )
    )
  (format #t "~2Tactor-group-count: ~D~%" (-> obj actor-group-count))
  (format #t "~2Tneck: ~A~%" (-> obj neck))
  (format #t "~2Ton-notice: ~A~%" (-> obj on-notice))
  (format #t "~2Ton-active: ~A~%" (-> obj on-active))
  (format #t "~2Ton-hostile: ~A~%" (-> obj on-hostile))
  (format #t "~2Ton-death: ~A~%" (-> obj on-death))
  (format #t "~2Tidle-anim-player: #<idle-control @ #x~X>~%" (-> obj idle-anim-player))
  (format #t "~2Trand-gen: ~A~%" (-> obj rand-gen))
  (label cfg-79)
  obj
  )

;; definition of type anim-info
(deftype anim-info (structure)
  ((anim-index   int32   :offset-assert   0)
   (travel-speed meters  :offset-assert   4)
   )
  :method-count-assert 9
  :size-assert         #x8
  :flag-assert         #x900000008
  )

;; definition for method 3 of type anim-info
(defmethod inspect anim-info ((obj anim-info))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'anim-info)
  (format #t "~1Tanim-index: ~D~%" (-> obj anim-index))
  (format #t "~1Ttravel-speed: (meters ~m)~%" (-> obj travel-speed))
  (label cfg-4)
  obj
  )

;; definition for method 12 of type enemy-focus
(defmethod enemy-focus-method-12 enemy-focus ((obj enemy-focus) (arg0 uint32) (arg1 enemy))
  (let* ((t9-0 (method-of-type focus try-update-focus))
         (s3-0 (t9-0 (the-as focus obj) (the-as process-focusable arg0)))
         )
    (when (not s3-0)
      (set! (-> obj flags) (logand -2 (-> obj flags)))
      (let ((s1-0 (method-of-object arg1 enemy-method-61)))
        (let ((t9-1 (method-of-object arg1 enemy-method-57)))
          (t9-1)
          )
        (set! (-> obj aware) (the-as uint (s1-0)))
        )
      )
    s3-0
    )
  )

;; definition for method 13 of type enemy-focus
(defmethod enemy-focus-method-13 enemy-focus ((obj enemy-focus) (arg0 uint32) (arg1 uint32))
  (let* ((t9-0 (method-of-type focus try-update-focus))
         (v0-0 (t9-0 (the-as focus obj) (the-as process-focusable arg0)))
         )
    (set! (-> obj aware) (the-as uint arg1))
    (if (not v0-0)
        (set! (-> obj flags) (logand -2 (-> obj flags)))
        )
    v0-0
    )
  )

;; definition for method 9 of type enemy-focus
(defmethod clear-focused enemy-focus ((obj enemy-focus))
  (let ((t9-0 (method-of-type focus clear-focused)))
    (t9-0 (the-as focus obj))
    )
  (set! (-> obj aware) (the-as uint 0))
  (let ((v0-1 (logand -2 (-> obj flags))))
    (set! (-> obj flags) v0-1)
    v0-1
    )
  )


